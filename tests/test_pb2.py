# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tests/test.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
import sys
if sys.version_info >= (3,):
  #some constants that are python2 only
  unicode = str
  long = int
  range = range
  unichr = chr
else:
  #some constants that are python2 only
  range = xrange
  unicode = unicode
  long = long
  unichr = unichr

from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tests/test.proto',
  package='test',
  serialized_pb=b'\n\x10tests/test.proto\x12\x04test\"#\n\x07\x41\x64\x64ress\x12\n\n\x02ip\x18\x01 \x02(\x0c\x12\x0c\n\x04port\x18\x02 \x02(\x05')




_ADDRESS = _descriptor.Descriptor(
  name='Address',
  full_name='test.Address',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='test.Address.ip', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='test.Address.port', index=1,
      number=2, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=26,
  serialized_end=61,
)

DESCRIPTOR.message_types_by_name['Address'] = _ADDRESS

Address = _reflection.GeneratedProtocolMessageType('Address', (_message.Message,),
    {
      'DESCRIPTOR': _ADDRESS,
      # @@protoc_insertion_point(class_scope:test.Address)
    })


# @@protoc_insertion_point(module_scope)
